1. Explain the difference between the concepts of associativity and precedence.

	Precedence refers to the order in which operations should be evaluated. Subexpressions with higher operator precedence are evaluated first. 
	each C# operator has an assigned priority and based on these priorities, the expression is evaluated.

	Each operator also has an associativity that defines whether the operator
	evaluates from left to right or from right to left.

2. Explain the diifference between the concepts of binary and unary operators.

	A binary operator is an operator that has two operands. For example, the
	multiplication operator (*) is a binary operator

	A unary operator is an operator that has just one operand. For example,
	the increment operator (++) is a unary operator.

3. List four constraints imposed by C# with respect to operator overloading.

	You cannot change the precedence and associativity of an operator. Precedence and associativity are based on the operator symbol and not on the type on which the operator symbol is being used. Hence, the expression a + b * c is always the same as a + (b * c) regardless of the types of a, b, and c.
	
	You cannot change the multiplicity (the number of operands) of an operator. For example, * (the symbol for multiplication) is a binary operator. If you declare a * operator for your own type, it must be a binary operator.

	You cannot invent new operator symbols. For example, you can’t create an operator symbol such as ** for raising one number to the power of another number. You’d have to define a method to do that.

	You can’t change the meaning of operators when they are applied to builtin types. For example, the expression 1 + 2 has a predefined meaning, and you’re not allowed to override this meaning. If you could do this, things would be too complicated.
	
	There are some operator symbols that you can’t overload. For example, you can’t overload the dot (.) operator, which indicates access to a class member. Again, if you could do this, it would lead to unnecessary complexity.

4. What is the syntax for overloading operators? Discuss access, scope, return value types, and parameter types and multiplicity.

	To define your own operator behavior, you must overload a selected operator. You use method-like syntax with a return type and parameters, but the name of the method is the keyword operator together with the operator symbol you are declaring. 
	For example, the following code shows a user-defined structure named Hour that defines a binary + operator to add together two instances ofHour.
	Must be public, must be static, must have a return type
	
	struct Hour
	{ public Hour(int initialValue) => this.value =
	initialValue;
	public static Hour operator +(Hour lhs, Hour rhs) => new Hour(lhs.value
	+ rhs.value);
	...
	private int value;
	}

5. What are symmetric overloaded binary operators and how do they differ from non-symmetric over-loaded binary operators?

	symetric operator - if you can do a + b then you can do b + a
	
	

6. Can you overload compound assignment operators? If so, please state how you do so. If not, explain why not.

	Compound assignment operators cannot be explicitly overloaded. However, when you overload a binary operator, the corresponding compound assignment operator, if any, is also implicitly overloaded	

7. What is the diifference between overloading increment and decrement operators for value types and reference types?

	one changes the memory adress location and one increases the value

8. Why do we overload some operators in pairs?

	if you do one of them its reasonable to expect that it does both. because of the neither or both rule

9. What is the difference between widening conversion and narrowing conversion?

	A widening conversion changes a value to a data type that can allow for any possible value of the original data. Widening conversions preserve the source value but can change its representation. This occurs if you convert from an integral type to Decimal, or from Char to String.

	A narrowing conversion changes a value to a data type that might not be able to hold some of the possible values. For example, a fractional value is rounded when it is converted to an integral type, and a numeric type being converted to Boolean is reduced to either True or False.

10. What is the difference between explicit conversion and implicit conversion?

An explicit conversion occurs when you use the CONVERT or CAST keywords explicitly in your query.

An implicit conversion arises when you have differing datatypes in an expression and SQL Server casts them automatically according to the rules of datatype precedence.

